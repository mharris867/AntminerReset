name: Build IoT Edge Module

on:
  push:
    branches:
     - master
     - develop
  pull_request:
  workflow_dispatch:

jobs:
  build:

    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Create Credential File
      env:
        PWORD: ${{ secrets.PWORD }}
      shell: pwsh
      run: |
        $User = "root"
        $PWord = ConvertTo-SecureString -String "${env:PWORD}" -AsPlainText -Force
        $creds = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $User, $PWord
        $creds | Export-CliXml -Path "./modules/AntminerResetModule/PSCreds_.xml"
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: '6.x'
        includePrerelease: true   
    - name: Determine Version
      id:   gitversion
      uses: gittools/actions/gitversion/execute@v0.9.7
    - name: Display GitVersion outputs
      run: |
        echo "Major: ${{ steps.gitversion.outputs.major }}"
        echo "Minor: ${{ steps.gitversion.outputs.minor }}"
        echo "Patch: ${{ steps.gitversion.outputs.patch }}"
        echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
        echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
        echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
        echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
        echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
        echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
        echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
        echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
        echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
        echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
        echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
        echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
        echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
        echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
        echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
        echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
        echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
        echo "EscapedBranchName: ${{ steps.gitversion.outputs.escapedBranchName }}"
        echo "Sha: ${{ steps.gitversion.outputs.sha }}"
        echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
        echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
        echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
        echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
        echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
        echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
        echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
        echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
        echo "UncommittedChanges: ${{ steps.gitversion.outputs.uncommittedChanges }}"
        echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"
    - name: Set Version number
      shell: pwsh
      run: |
        $MajorVersion = 1
        $MinorVersion = 0
        $SpanFromY2K = New-TimeSpan -Start (Get-Date "1/1/2000 12:00 AM") -End (Get-Date)
        $SubMajor = $SpanFromY2K.Days
        $CurrDay = New-TimeSpan -Start (Get-Date -Hour 0 -Minute 00 -Second 00) -End (Get-Date)
        [int]$SubMinor = $CurrDay.TotalSeconds / 2
        if ($env:GITHUB_REF_NAME -Like '*master*') {Add-Content -Path $env:GITHUB_ENV -Value "VERSION_INFO=$MajorVersion.$MinorVersion.$SubMajor.$SubMinor"}
        else {
        $prereleasesuffix = $env:GITHUB_REF_NAME.Substring($env:GITHUB_REF_NAME.LastIndexOf("/") + 1).Replace("_", "-").Replace(".", "-")
        $prereleasesuffix = $prereleasesuffix.Substring(0, [System.Math]::Min(19, $prereleasesuffix.Length))
        Add-Content -Path $env:GITHUB_ENV -Value "VERSION_INFO=$MajorVersion.$MinorVersion.$SubMajor.$SubMinor-$prereleasesuffix"
        }
        $module = (get-content ./modules/AntminerResetModule/module.json | ConvertFrom-Json)
        $module.image.tag.version = "$MajorVersion.$MinorVersion.$SubMajor.$SubMinor"
        $module | ConvertTo-Json -Depth 100 | set-content ./modules/AntminerResetModule/module.json
        Write-Host "Version Set To: $MajorVersion.$MinorVersion.$SubMajor.$SubMinor"
    - name: Build IoT Edge Solution PR
      if: ${{ github.event_name == 'pull_request' }}
      run: docker build  --rm -f "./modules/AntminerResetModule/Dockerfile.arm32v7.debug" -t localhost:5000/antminerresetmodule:${{ env.VERSION_INFO }}-arm32v7.debug "./modules/AntminerResetModule" && docker push localhost:5000/antminerresetmodule:${{ env.VERSION_INFO }}-arm32v7.debug
    - name: Build IoT Edge Solution
      if: ${{ contains(github.ref, 'master') || contains(github.ref, 'develop') }}
      run: docker build  --rm -f "./modules/AntminerResetModule/Dockerfile.arm32v7.debug" -t mharris867/antminerresetmodule:${{ env.VERSION_INFO }}-arm32v7.debug "./modules/AntminerResetModule" && docker push mharris867/antminerresetmodule:${{ env.VERSION_INFO }}-arm32v7.debug
    - name: Generate IoT Edge Deployment Manifiest
      run: iotedgedev genconfig -f ./deployment.debug.template.json -P arm32v7 --fail-on-validation-error
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Upload Artifacts
        path: |
          **/module.json
          config/*.*