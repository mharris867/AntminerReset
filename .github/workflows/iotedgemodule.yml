name: Build IoT Edge Module

on:
  push:
    branches:
      - main
      - master
      - develop
  pull_request:
  workflow_dispatch:

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ARM64, ARM]
        include:
        - os: ARM64
          TARGET: arm64v8
        - os: ARM
          TARGET: arm32v7  
    steps:
    - uses: actions/checkout@v3
      with:
       fetch-depth: 0 # Required for getversion
    - uses: actions/setup-dotnet@v2 # required for gitversion, This could be done in a container later to reduce the number of software dependencies on the host since it is only for versioning
      with:
        dotnet-version: '3.1.x'
    - name: Create Credential File
      env:
        PWORD: ${{ secrets.PWORD }}
      shell: pwsh
      run: |
        $User = "root"
        $PWord = ConvertTo-SecureString -String "${env:PWORD}" -AsPlainText -Force
        $creds = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $User, $PWord
        $creds | Export-CliXml -Path "./modules/AntminerResetModule/PSCreds_.xml"
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.13
      with:
        versionSpec: '5.x'
    - name: Determine Version
      uses: gittools/actions/gitversion/execute@v0.9.13
      with:
        updateAssemblyInfo: true
    - name: List Variables
      shell: pwsh
      run: |
        Write-Host "Listing Available Environment Variables"
        get-childitem "env:"
        Write-Host "------------- End of Variable List -------------------"
    - name: Set Release RC
      shell: pwsh
      run: |
        if ($env:GITHUB_REF_NAME -Like '*master*' -or $env:GITHUB_REF_NAME -Like '*main*' ) {$prerelease = "true"}
        else {$prerelease = "true"}
        Add-Content -Path $env:GITHUB_ENV -Value "prerelease=$prerelease"
        Write-Host "Pre-release Set To: $prerelease"
    - name: Build IoT Edge Solution PR
      if: ${{ github.event_name == 'pull_request' }}
      run: docker build  --rm -f "./modules/AntminerResetModule/Dockerfile.${{ matrix.TARGET }}.debug" -t localhost:5000/antminerresetmodule:${{ env.GITVERSION_SEMVER }}-${{ matrix.TARGET }}.debug "./modules/AntminerResetModule" && docker push localhost:5000/antminerresetmodule:${{ env.GITVERSION_SEMVER }}-${{ matrix.TARGET }}.debug
    - name: Build IoT Edge Solution
      if: ${{ contains(github.ref, 'master') || contains(github.ref, 'develop') || contains(github.ref, 'main')}}
      run: docker build  --rm -f "./modules/AntminerResetModule/Dockerfile.${{ matrix.TARGET }}.debug" -t mharris867/antminerresetmodule:${{ env.GITVERSION_SEMVER }}-${{ matrix.TARGET }}.debug "./modules/AntminerResetModule" && docker push mharris867/antminerresetmodule:${{ env.GITVERSION_SEMVER }}-${{ matrix.TARGET }}.debug
    - name: Generate IoT Edge Deployment Manifiest # This should be done in the build container later to reduce the number of software dependencies on the host
      run: iotedgedev genconfig -f ./deployment.debug.template.json -P ${{ matrix.TARGET }} --fail-on-validation-error
    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        generateReleaseNotes: "true"
        prerelease: ${{ env.prerelease }}
        tag: ${{ env.GITVERSION_SEMVER }}
        name: ${{ env.GITVERSION_INFORMATIONALVERSION }}
        owner: ${{ env.GITHUB_REPOSITORY_OWNER }}
        commit: ${{ env.GITHUB_SHA }} 
        artifacts: "**/module.json,config/*.*"

